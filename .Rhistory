plot(snotel_spatial))
plot(snotel_spatial)
st_crs(snotel_spatial$units)
snotel_spatial <- st_as_sf(all_snotel, coords = c("lat", "lon"), crs = 2163)
asos_spatial <- st_as_sf(western_asos_stations, coords = c("lat", "lon"), crs = 2163)
stream_spatial <- st_as_sf(clean_western_gauges, coords = c("lat", "lon"), crs = 2163)
st_crs(snotel_spatial$units)
st_crs(snotel_spatial)
snotel_buffer <- st_buffer(snotel_spatial, dist = 10000)
# find points within polygons
asos_in_snotel <- st_join(snotel_buffer, asos_spatial, join = st_within)
View(asos_in_snotel)
# find points within polygons
asos_in_snotel <- st_join(asos_spatial, snotel_buffer, join = st_within)
View(asos_in_snotel)
snotel_buffer <- st_buffer(snotel_spatial, dist = 10)
# find points within polygons
asos_in_snotel <- st_join(asos_spatial, snotel_buffer, join = st_within)
snotel_spatial <- st_as_sf(all_snotel, coords = c("lat", "lon"), crs = 4326) %>%
st_transform(crs = 2163)
snotel_spatial <- st_as_sf(all_snotel, coords = c("lat", "lon"), crs = 4326) %>%
st_transform(crs = 2163)
asos_spatial <- st_as_sf(western_asos_stations, coords = c("lat", "lon"), crs = 4326) %>%
st_transform(crs = 2163)
stream_spatial <- st_as_sf(clean_western_gauges, coords = c("lat", "lon"), crs = 2163) %>%
st_transform(crs = 2163)
snotel_buffer <- st_buffer(snotel_spatial, dist = 10000)
# find points within polygons
asos_in_snotel <- asos_spatial[snotel_buffer,]
snotel_buffer <- st_buffer(snotel_spatial, dist = 30000)
# find points within polygons
asos_in_snotel <- asos_spatial[snotel_buffer,]
snotel_spatial <- st_as_sf(all_snotel, coords = c("lat", "lon"), crs = 4326) %>%
st_transform(crs = 2163)
asos_spatial <- st_as_sf(western_asos_stations, coords = c("lat", "lon"), crs = 4326) %>%
st_transform(crs = 2163)
stream_spatial <- st_as_sf(clean_western_gauges, coords = c("lat", "lon"), crs = 4326) %>%
st_transform(crs = 2163)
snotel_buffer <- st_buffer(snotel_spatial, dist = 100000)
# find points within polygons
asos_in_snotel <- asos_spatial[snotel_buffer,]
snotel_spatial <- st_as_sf(all_snotel, coords = c("lat", "lon"), crs = 4326) %>%
st_transform(.,crs = 2163)
western_asos_stations
snotel_spatial <- st_as_sf(all_snotel, coords = c("lon", "lat"), crs = 4326) %>%
st_transform(.,crs = 2163)
snotel_spatial <- st_as_sf(all_snotel, coords = c("lon", "lat"), crs = 4326) %>%
st_transform(.,crs = 2163)
asos_spatial <- st_as_sf(western_asos_stations, coords = c("lon", "lat"), crs = 4326) %>%
st_transform(crs = 2163)
stream_spatial <- st_as_sf(clean_western_gauges, coords = c("lon", "lat"), crs = 4326) %>%
st_transform(crs = 2163)
snotel_buffer <- st_buffer(snotel_spatial, dist = 100000)
# find points within polygons
asos_in_snotel <- asos_spatial[snotel_buffer,]
snotel_buffer <- st_buffer(snotel_spatial, dist = 30000)
# find points within polygons
asos_in_snotel <- asos_spatial[snotel_buffer,]
snotel_buffer <- st_buffer(snotel_spatial, dist = 100000)
# find points within polygons
asos_in_snotel <- asos_spatial[snotel_buffer,]
snotel_buffer <- st_buffer(snotel_spatial, dist = 10000)
# find points within polygons
asos_in_snotel <- asos_spatial[snotel_buffer,]
snotel_buffer <- st_buffer(snotel_spatial, dist = 20000)
# find points within polygons
asos_in_snotel <- asos_spatial[snotel_buffer,]
snotel_buffer <- st_buffer(snotel_spatial, dist = 30000)
# find points within polygons
asos_in_snotel <- asos_spatial[snotel_buffer,]
plot(asos_in_snotel)
mapview(asos_in_snotel)
library(mapview)
mapview(asos_in_snotel)
snotel_buffer <- st_buffer(snotel_spatial, dist = 20000)
# find points within polygons
asos_in_snotel <- asos_spatial[snotel_buffer,]
mapview(asos_in_snotel)
snotel_buffer <- st_buffer(snotel_spatial, dist = 30000)
# find points within polygons
asos_in_snotel <- asos_spatial[snotel_buffer,]
mapview(asos_in_snotel)
mapview(stream_spatial)
install.packages("MazamaSpatialUtils")
library(MazamaSpatialUtils)
?getHUC()
?getSpatialData
?getHUC()
?getSpatialData
install.packages("nhdplusTools")
download_nhdplusv2(outdir = "\\raw",
url = paste0("https://s3.amazonaws.com/edap-nhdplus/NHDPlusV21/",
"Data/NationalData/NHDPlusV21_NationalData_Seamless",
"_Geodatabase_Lower48_07.7z"))
download_nhdplusv2(outdir = "./raw",
url = paste0("https://s3.amazonaws.com/edap-nhdplus/NHDPlusV21/",
"Data/NationalData/NHDPlusV21_NationalData_Seamless",
"_Geodatabase_Lower48_07.7z"))
download_nhdplusv2(outdir = "./raw/",
url = paste0("https://s3.amazonaws.com/edap-nhdplus/NHDPlusV21/",
"Data/NationalData/NHDPlusV21_NationalData_Seamless",
"_Geodatabase_Lower48_07.7z"))
download_nhdplusv2(outdir = "/raw/",
url = paste0("https://s3.amazonaws.com/edap-nhdplus/NHDPlusV21/",
"Data/NationalData/NHDPlusV21_NationalData_Seamless",
"_Geodatabase_Lower48_07.7z"))
download_nhdplusv2(outdir = "raw/",
url = paste0("https://s3.amazonaws.com/edap-nhdplus/NHDPlusV21/",
"Data/NationalData/NHDPlusV21_NationalData_Seamless",
"_Geodatabase_Lower48_07.7z"))
download_nhdplusv2("./raw",
url = paste0("https://s3.amazonaws.com/edap-nhdplus/NHDPlusV21/",
"Data/NationalData/NHDPlusV21_NationalData_Seamless",
"_Geodatabase_Lower48_07.7z"))
install.packages("nhdplusTools")
install.packages("nhdplusTools")
profvis({
runApp('C:\\Users\\aolse\\Desktop\\Shiny Course\\Alex_Project\\Hydrologic Analysis\\') } # end profvis function
, prof_output = 'C:\\Users\\aolse\\Desktop\\Shiny Course\\Alex_Project\\Hydrologic Analysis\\')  # end profvis
library(profvis)
profvis({
runApp('C:\\Users\\aolse\\Desktop\\Shiny Course\\Alex_Project\\Hydrologic Analysis\\') } # end profvis function
, prof_output = 'C:\\Users\\aolse\\Desktop\\Shiny Course\\Alex_Project\\Hydrologic Analysis\\')  # end profvis
shiny::runApp()
profvis({
runApp('C:\\Users\\aolse\\Desktop\\Shiny Course\\Alex_Project\\Hydrologic Analysis\\') } # end profvis function
, prof_output = 'C:\\Users\\aolse\\Desktop\\Shiny Course\\Alex_Project\\Hydrologic Analysis\\')  # end profvis
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(RNRCS)
library(metScanR)
library(tidyverse)
library(lubridate)
library(dataRetrieval)
library(riem)
library(sf)
library(mapview)
library(MazamaSpatialUtils)
# Chunk 2: usgs gauge downloader
states = c('CO','NM', 'AZ', 'OR', 'SD', 'MT', 'WA', 'ID', 'AK', 'CA', 'NV', 'UT', 'WY')
#downloads usgs gage data for all snotel states only if a gage has min end date of at least 2019-10-01 and it has ten years of daily data
state_downloader = function(state,
min_end = ymd('2019-10-01'),
min_count = 10*365) {
state_data = whatNWISdata(stateCd = state) %>%
filter(end_date > min_end,
count_nu > min_count) %>%
mutate(state = state)
print(state)
return(state_data)
}
all_western_gauges <- map_dfr(states,state_downloader)
clean_western_gauges <- all_western_gauges %>%
filter(!is.na(dec_lat_va)) %>%
filter(!is.na(dec_long_va)) %>%
rename(lat = dec_lat_va, lon = dec_long_va)
# Chunk 3: snotel downloader
all_snotel <- read.csv("raw\\snotel.csv") %>%
mutate(site_no = str_split_fixed(site_name, "\\(|\\)",3)[,2]) %>%
mutate(id = site_no) %>%
as_tibble()
# Chunk 4: asos downloader
asos_stations = c('AK_ASOS','AZ_ASOS', 'CA_ASOS', 'CO_ASOS', 'ID_ASOS', 'NM_ASOS', 'MT_ASOS', 'OR_ASOS', 'SD_ASOS', 'WA_ASOS', 'NV_ASOS', 'UT_ASOS', 'WY_ASOS')
state_asos_downloader = function(state) {
state_asos = riem_stations(network = state) %>%
mutate(state = substr(state, start = 1, stop = 2))
print(state)
return(state_asos)
}
western_asos_stations <- map_dfr(asos_stations, state_asos_downloader)
western_asos_stations
# Chunk 5: spatial setup
snotel_spatial <- st_as_sf(all_snotel, coords = c("lon", "lat"), crs = 4326) %>%
st_transform(.,crs = 2163)
asos_spatial <- st_as_sf(western_asos_stations, coords = c("lon", "lat"), crs = 4326) %>%
st_transform(crs = 2163)
stream_spatial <- st_as_sf(clean_western_gauges, coords = c("lon", "lat"), crs = 4326) %>%
st_transform(crs = 2163)
#buffer snotel sites by 30km
snotel_buffer <- st_buffer(snotel_spatial, dist = 30000)
# find asos points within snotel polygons by subsetting
asos_in_snotel <- asos_spatial[snotel_buffer,]
mapview(asos_in_snotel)
# Chunk 6: downloading huc data
# library(httr)
# get_mutate_HUC8s <- function(wfs = "http://cida.usgs.gov/gdp/geoserver/wfs",
#                             feature = "derivative:wbdhu8_alb_simp",
#                             plot_CRS = "+init=epsg:2163"){
#  destination <- tempfile(pattern = 'huc_shape', fileext='.zip')
#  query <- sprintf('%s?service=WFS&request=GetFeature&typeName=%s&outputFor#mat=shape-zip&version=1.0.0', wfs, feature)
#  file <- GET(query, write_disk(destination, overwrite=T), progress())
#  shp.path <- tempdir()
#  unzip(destination, exdir = shp.path)
#  layer <- strsplit(feature,'[:]')[[1]][2]
#  hucs <- st_read(shp.path) %>%
#    st_transform(.,2163)
#  unlink(destination)
#  return(hucs)
# }
#
#
# hucs <- get_mutate_HUC8s() %>% st_as_sf(.) %>%
#   st_transform(.,2163)
# Chunk 7: stiching state huc8
#list folers in huc8
huc_list <- list.files("huc8", full.names = T)
huc_shp_reader <- function(huc) {
shp_file <- paste0(huc,'/WBDHU8.shp')
huc_st_shp <- st_read(shp_file)
}
snotel_state_hucs <- map(huc_list, huc_shp_reader)
grouped_state_hucs <- do.call('rbind',snotel_state_hucs) %>%
st_transform(crs = 2163) %>%
st_simplify(dTolerance = 1000)
mapview(grouped_state_hucs)
# Chunk 8: subset hucs to snotel
snotel_in_hucs <- grouped_state_hucs[snotel_spatial,]
# Chunk 9: overlay/join hucs in snotel with asos near snotel
mapview(snotel_in_hucs)
mapview(asos_in_snotel)
snotel_spatial <- st_transform(snotel_spatial, crs = 4326)
save(snotel_in_hucs,asos_in_snotel,snotel_spatial,file='SnotelAnalysis.RData')
load('SnotelAnalysis.RData')
load('SnotelAnalysis.RData')
load('SnotelAnalysis.RData')
profvis({
runApp('C:\\Users\\aolse\\Desktop\\Shiny Course\\Alex_Project\\Hydrologic Analysis\\') } # end profvis function
, prof_output = 'C:\\Users\\aolse\\Desktop\\Shiny Course\\Alex_Project\\Hydrologic Analysis\\')  # end profvis
# 6. If Step 5 fails, try this: Convert to html if needed (memory problems)
p <- profvis(prof_input = 'C:\\Users\\aolse\\Desktop\\Shiny Course\\Alex_Project\\Hydrologic Analysis\\file41741a8b4d20.Rprof')
htmlwidgets::saveWidget(p, 'C:\\Users\\aolse\\Desktop\\Shiny Course\\Alex_Project\\Hydrologic Analysis\\profile.html')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
grabNRCS.data(network = "SNTL",
site = "1170",
timescale = "daily",
DayBgn = paste(2017, "10", "01", sep = "-" ),
DayEnd = paste(2018, "09", "30", sep = "-")) %>%
mutate(date = lubridate::ymd(Date))
runApp()
grabNRCS.data(network = "SNTL",
site = 1170,
timescale = "daily",
DayBgn = paste(2017, "10", "01", sep = "-" ),
DayEnd = paste(2018, "09", "30", sep = "-")) %>%
mutate(date = lubridate::ymd(Date),
snow_density = Snow.Water.Equivalent..in./Snow.Depth..in.)
grabNRCS.data(network = "SNTL",
site = 1170,
timescale = "daily",
DayBgn = paste(2017, "10", "01", sep = "-" ),
DayEnd = paste(2018, "09", "30", sep = "-")) %>%
mutate(date = lubridate::ymd(Date))
runApp()
grabNRCS.data(network = "SNTL",
site = 1170,
timescale = "daily",
DayBgn = paste(2017, "10", "01", sep = "-" ),
DayEnd = paste(2018, "09", "30", sep = "-")) %>%
dplyr::mutate(date = lubridate::ymd(Date),
snow_densit = ifelse(Snow.Depth..in. > 2, Snow.Water.Equivalent..in./Snow.Depth..in., NA))
ty <- grabNRCS.data(network = "SNTL",
site = 1170,
timescale = "daily",
DayBgn = paste(as.numeric(2017, "10", "01", sep = "-" ),
DayEnd = paste(2018, "09", "30", sep = "-"))
ty <- grabNRCS.data(network = "SNTL",
site = snotel_id()$id,
timescale = "daily",
DayBgn = paste(as.numeric(input$wy)-1, "10", "01", sep = "-" ),
DayEnd = paste(input$wy, "09", "30", sep = "-"))
ty <- grabNRCS.data(network = "SNTL",
site = 1170,
timescale = "daily",
DayBgn = paste(2017, "10", "01", sep = "-" ),
DayEnd = paste(2018, "09", "30", sep = "-"))
View(ty)
View(ty)
names(ty)
runApp()
runApp()
runApp()
View(ty)
runApp()
snotel <- grabNRCS.data(network = "SNTL",
site = "1170",
timescale = "hourly",
DayBgn = "2018-09-01",
DayEnd = "2019-08-31")
View(snotel)
snotel <- grabNRCS.data(network = "SNTL",
site = "1170",
timescale = "daily",
DayBgn = "2018-09-01",
DayEnd = "2019-08-31")
head(snotel)
runApp()
ty <-    grabNRCS.data(network = "SNTL",
site = 1170,
timescale = "daily",
DayBgn = paste(2018, "10", "01", sep = "-" ),
DayEnd = paste(2019, "09", "30", sep = "-")) %>%
dplyr::rename(avg_temp_f = Air.Temperature.Average..degF.,
max_temp_f = Air.Temperature.Maximum..degF.,
min_temp_f = Air.Temperature.Minimum..degF.,
obs_temp_f = Air.Temperature.Observed..degF..Start.of.Day.Values,
precip_accum = Precipitation.Accumulation..in..Start.of.Day.Values,
avg_relh = Relative.Humidity.Average..pct.,
max_relh = Relative.Humidity.Maximum..pct.,
min_relh = Relative.Humidity.Minimum..pct.,
snow_depth_in = Snow.Depth..in..Start.of.Day.Values,
swe_in = Snow.Water.Equivalent..in..Start.of.Day.Values)
View(ty)
> ty <-    grabNRCS.data(network = "SNTL",
+                        site = 1170,
+                        timescale = "daily",
+                        DayBgn = paste(2018, "10", "01", sep = "-" ),
+                        DayEnd = paste(2019, "09", "30", sep = "-")) %>%
+     dplyr::rename(avg_temp_f = Air.Temperature.Average..degF.,
+                   max_temp_f = Air.Temperature.Maximum..degF.,
+                   min_temp_f = Air.Temperature.Minimum..degF.,
+                   obs_temp_f = Air.Temperature.Observed..degF..Start.of.Day.Values,
+                   precip_accum = Precipitation.Accumulation..in..Start.of.Day.Values,
+                   avg_relh = Relative.Humidity.Average..pct.,
+                   max_relh = Relative.Humidity.Maximum..pct.,
+                   min_relh = Relative.Humidity.Minimum..pct.,
+                   snow_depth_in = Snow.Depth..in..Start.of.Day.Values,
+                   swe_in = Snow.Water.Equivalent..in..Start.of.Day.Values)
ty <-    grabNRCS.data(network = "SNTL",
site = 969,
timescale = "daily",
DayBgn = paste(2011, "10", "01", sep = "-" ),
DayEnd = paste(2012, "09", "30", sep = "-")) %>%
dplyr::rename(avg_temp_f = Air.Temperature.Average..degF.,
max_temp_f = Air.Temperature.Maximum..degF.,
min_temp_f = Air.Temperature.Minimum..degF.,
obs_temp_f = Air.Temperature.Observed..degF..Start.of.Day.Values,
precip_accum = Precipitation.Accumulation..in..Start.of.Day.Values,
avg_relh = Relative.Humidity.Average..pct.,
max_relh = Relative.Humidity.Maximum..pct.,
min_relh = Relative.Humidity.Minimum..pct.,
snow_depth_in = Snow.Depth..in..Start.of.Day.Values,
swe_in = Snow.Water.Equivalent..in..Start.of.Day.Values)
runApp()
runApp()
ty <- grabNRCS.data(network = "SNTL",
site = 1138,
timescale = "daily",
DayBgn = paste(2011, "10", "01", sep = "-" ),
DayEnd = paste(2012, "09", "30", sep = "-")) %>%
dplyr::rename(avg_temp_f = Air.Temperature.Average..degF.,
max_temp_f = Air.Temperature.Maximum..degF.,
min_temp_f = Air.Temperature.Minimum..degF.,
obs_temp_f = Air.Temperature.Observed..degF..Start.of.Day.Values,
precip_accum = Precipitation.Accumulation..in..Start.of.Day.Values,
# avg_relh = Relative.Humidity.Average..pct.,
# max_relh = Relative.Humidity.Maximum..pct.,
# min_relh = Relative.Humidity.Minimum..pct.,
snow_depth_in = Snow.Depth..in..Start.of.Day.Values,
swe_in = Snow.Water.Equivalent..in..Start.of.Day.Values) %>%
dplyr::mutate(date = lubridate::ymd(Date),
snow_density = ifelse(snow_depth_in > 3, (swe_in/snow_depth_in)*1000, NA))
View(ty)
ty <- grabNRCS.data(network = "SNTL",
site = 1138,
timescale = "daily",
DayBgn = paste(as.numeric(2018, "10", "01", sep = "-" ),
DayEnd = paste(2019, "09", "30", sep = "-")) %>%
dplyr::rename(avg_temp_f = Air.Temperature.Average..degF.,
max_temp_f = Air.Temperature.Maximum..degF.,
min_temp_f = Air.Temperature.Minimum..degF.,
obs_temp_f = Air.Temperature.Observed..degF..Start.of.Day.Values,
precip_accum = Precipitation.Accumulation..in..Start.of.Day.Values,
# avg_relh = Relative.Humidity.Average..pct.,
# max_relh = Relative.Humidity.Maximum..pct.,
# min_relh = Relative.Humidity.Minimum..pct.,
snow_depth_in = Snow.Depth..in..Start.of.Day.Values,
swe_in = Snow.Water.Equivalent..in..Start.of.Day.Values) %>%
dplyr::mutate(date = lubridate::ymd(Date),
snow_density = ifelse(snow_depth_in > 3, (swe_in/snow_depth_in)*1000, NA))
View(ty)
ty <- grabNRCS.data(network = "SNTL",
site = 1138,
timescale = "daily",
DayBgn = paste(2017, "10", "01", sep = "-" ),
DayEnd = paste(2018, "09", "30", sep = "-")) %>%
dplyr::rename(avg_temp_f = Air.Temperature.Average..degF.,
max_temp_f = Air.Temperature.Maximum..degF.,
min_temp_f = Air.Temperature.Minimum..degF.,
obs_temp_f = Air.Temperature.Observed..degF..Start.of.Day.Values,
precip_accum = Precipitation.Accumulation..in..Start.of.Day.Values,
# avg_relh = Relative.Humidity.Average..pct.,
# max_relh = Relative.Humidity.Maximum..pct.,
# min_relh = Relative.Humidity.Minimum..pct.,
snow_depth_in = Snow.Depth..in..Start.of.Day.Values,
swe_in = Snow.Water.Equivalent..in..Start.of.Day.Values) %>%
dplyr::mutate(date = lubridate::ymd(Date),
snow_density = ifelse(snow_depth_in > 3, (swe_in/snow_depth_in)*1000, NA))
View(ty)
ty <- grabNRCS.data(network = "SNTL",
site = 1170,
timescale = "daily",
DayBgn = paste(2012, "10", "01", sep = "-" ),
DayEnd = paste(2013, "09", "30", sep = "-")) %>%
dplyr::rename(avg_temp_f = Air.Temperature.Average..degF.,
max_temp_f = Air.Temperature.Maximum..degF.,
min_temp_f = Air.Temperature.Minimum..degF.,
obs_temp_f = Air.Temperature.Observed..degF..Start.of.Day.Values,
precip_accum = Precipitation.Accumulation..in..Start.of.Day.Values,
# avg_relh = Relative.Humidity.Average..pct.,
# max_relh = Relative.Humidity.Maximum..pct.,
# min_relh = Relative.Humidity.Minimum..pct.,
snow_depth_in = Snow.Depth..in..Start.of.Day.Values,
swe_in = Snow.Water.Equivalent..in..Start.of.Day.Values) %>%
dplyr::mutate(date = lubridate::ymd(Date),
snow_density = ifelse(snow_depth_in > 3, (swe_in/snow_depth_in)*1000, NA))
View(ty)
ty <- grabNRCS.data(network = "SNTL",
site = 1170,
timescale = "daily",
DayBgn = paste(2018, "10", "01", sep = "-" ),
DayEnd = paste(2019, "09", "30", sep = "-")) %>%
dplyr::rename(avg_temp_f = Air.Temperature.Average..degF.,
max_temp_f = Air.Temperature.Maximum..degF.,
min_temp_f = Air.Temperature.Minimum..degF.,
obs_temp_f = Air.Temperature.Observed..degF..Start.of.Day.Values,
precip_accum = Precipitation.Accumulation..in..Start.of.Day.Values,
# avg_relh = Relative.Humidity.Average..pct.,
# max_relh = Relative.Humidity.Maximum..pct.,
# min_relh = Relative.Humidity.Minimum..pct.,
snow_depth_in = Snow.Depth..in..Start.of.Day.Values,
swe_in = Snow.Water.Equivalent..in..Start.of.Day.Values) %>%
dplyr::mutate(date = lubridate::ymd(Date),
snow_density = ifelse(snow_depth_in > 3, (swe_in/snow_depth_in)*1000, NA))
View(ty)
runApp()
runApp()
runApp()
runApp()
View(asos_in_snotel)
runApp()
runApp()
View(snotel_spatial)
View(asos_in_snotel)
runApp()
runApp()
runApp()
runApp()
snotel_spatial <- st_transform(snotel_spatial, crs = 4326)
asos_in_snotel <- st_transform(asos_in_snotel, crs = 4326)
snotel_in_hucs <- st_transform(snotel_in_hucs, crs = 4326)
save(snotel_in_hucs,asos_in_snotel,snotel_spatial,file='SnotelAnalysis.RData')
load("SnotelAnalysis.RData")
runApp()
View(snotel_in_hucs)
runApp()
runApp()
?st_contains
View(asos_in_snotel)
View(asos_in_snotel)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
save(snotel_in_hucs,asos_in_snotel,snotel_spatial,file='SnotelAnalysis.RData')
load('SnotelAnalysis.RData')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
save(snotel_in_hucs,asos_in_snotel,snotel_spatial,file='SnotelAnalysis.RData')
runApp()
runApp()
runApp()
View(asos_in_snotel)
View(snotel_spatial)
View(snotel_in_hucs)
View(asos_in_snotel)
View(snotel_spatial)
runApp('swe_viewer.R')
runApp('swe_viewer.R')
runApp('swe_viewer.R')
runApp('swe_viewer.R')
runApp('swe_viewer.R')
runApp('swe_viewer.R')
View(snotel_spatial)
runApp('swe_viewer.R')
runApp('swe_viewer.R')
runApp('swe_viewer.R')
runApp('swe_viewer.R')
runApp('swe_viewer.R')
runApp('swe_viewer.R')
runApp('swe_viewer.R')
runApp('swe_viewer.R')
runApp('swe_viewer.R')
runApp('swe_viewer.R')
snotel_spatial
runApp('swe_viewer.R')
runApp('swe_viewer.R')
runApp('swe_viewer.R')
runApp('app.R')
shiny::runApp()
shiny::runApp()
load("C:/Users/aolse/Desktop/Shiny Workshop/Alex_Project/RecentSWE/SnotelAnalysis.RData")
